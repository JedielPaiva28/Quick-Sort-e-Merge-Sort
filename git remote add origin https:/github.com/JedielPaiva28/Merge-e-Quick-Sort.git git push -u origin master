/*  QuickSort */
#include<stdio.h>

// Uma função para trocar dois elementos
void swap(int* a, int* b)
{
	int t = *a;
	*a = *b;
	*b = t;
}

/* Esta função assume o último elemento como pivô,
coloca o elemento pivô na sua posição correta, classificado
array, e coloca todos os que são menores que o pivô para a esquerda do Pivô
e os elementos  que são maiores a direita do pivô  */

int partition (int arr[], int low, int high)
{
	int pivot = arr[high]; // pivô
	int i = (low - 1); // Indice do menor elemento

	for (int j = low; j <= high- 1; j++)
	{
		// Se o atual elemento for menor que o pivô
		if (arr[j] < pivot)
		{
			i++; // Incrementa o Indice do menor elemento
			swap(&arr[i], &arr[j]);
		}
	}
	swap(&arr[i + 1], &arr[high]);
	return (i + 1);
}

/* A função que implementa o QuickSort
arr[] --> Array a ser ordenado,
low --> Começando o indice,
high --> Finalizando o indece */
void quickSort(int arr[], int low, int high)
{
	if (low < high)
	{
		/* pi esta parcionando o Indice, arr[p] e
		esta colocando no lugar certo */
		int pi = partition(arr, low, high);

		// separa os elementos antes e depois da partição

		quickSort(arr, low, pi - 1);
		quickSort(arr, pi + 1, high);
	}
}

/* Função para print do array */
void printArray(int arr[], int size)
{
	int i;
	for (i=0; i < size; i++)
		printf("%d ", arr[i]);
	//printf("n");
}

// Função Main()
int main()
{
	int arr[] = {10, 7, 8, 9, 1, 5};
	int n = sizeof(arr)/sizeof(arr[0]);

	printf("Array fornecido: \n");
	printArray(arr, n);

	quickSort(arr, 0, n-1);

    printf("\n");
 	printf("Array Ordenado: \n");
	printArray(arr, n);
	return 0;
}
